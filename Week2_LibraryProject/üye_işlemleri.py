import json
import os
from datetime import datetime, timedelta

# JSON dosyasÄ±nÄ±n adÄ±
DOSYA_ADI = os.path.join(os.path.dirname(__file__), "uye.json")

# TÃ¼rkÃ§e hafta gÃ¼nÃ¼ isimleri
TURKCE_GUNLER = ["Pazartesi", "SalÄ±", "Ã‡arÅŸamba", "PerÅŸembe", "Cuma", "Cumartesi", "Pazar"]

# JSON dosyasÄ±nÄ± oku
def dosya_oku():
    if not os.path.exists(DOSYA_ADI):
        print("uye.json bulunamadÄ±, yeni dosya oluÅŸturuluyor...")
        with open(DOSYA_ADI, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=4)
        return []
    try:
        with open(DOSYA_ADI, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
            else:
                print("JSON formatÄ± beklenenden farklÄ±. BoÅŸ listeyle baÅŸlatÄ±lÄ±yor.")
                return []
    except json.JSONDecodeError:
        print("JSON dosyasÄ± okunamadÄ±. BoÅŸ listeyle devam ediliyor.")
        return []

# JSON dosyasÄ±na yaz
def dosya_yaz(veri):
    with open(DOSYA_ADI, "w", encoding="utf-8") as f:
        json.dump(veri, f, ensure_ascii=False, indent=4)

# Ãœyeleri listele
def uyeleri_listele():
    uyeler = dosya_oku()
    if not uyeler:
        print("HenÃ¼z kayÄ±tlÄ± Ã¼ye bulunmuyor.")
        return
    print(f"\nToplam {len(uyeler)} Ã¼ye listelendi:\n")
    for u in uyeler:
        print(f"ID: {u.get('Uye_ID', '-') } | Ad Soyad: {u.get('Ad_Soyad', '-') } | "
              f"Adres: {u.get('Adres', '-') } | Telefon: {u.get('Telefon', '-') } | "
              f"KayÄ±t Tarihi: {u.get('Kayit_Tarihi', '-')}")
        odunclar = u.get("Odunc_Kitaplar", []) or []
        if odunclar:
            for k in odunclar:
                kitap_adi = k.get('Kitap_Adi', 'Bilinmiyor')
                alis = k.get('Alis_Tarihi', '-')
                teslim = k.get('Teslim_Tarihi', '-')
                teslim_gunu = k.get('Teslim_Gunu', '-')
                print(f"   ğŸ“˜ {kitap_adi} - AlÄ±ÅŸ: {alis} - Teslim: {teslim} ({teslim_gunu})")
        print("-" * 70)

# Ãœye ekle
def uye_ekle(uye_id, ad_soyad, adres, telefon):
    uyeler = dosya_oku()
    if any(str(u.get("Uye_ID")) == str(uye_id) for u in uyeler):
        print("Bu ID ile kayÄ±tlÄ± bir Ã¼ye zaten var!")
        return
    if not ad_soyad or not adres or not telefon:
        print("Eksik bilgi! LÃ¼tfen tÃ¼m alanlarÄ± doldurunuz.")
        return

    yeni_uye = {
        "Uye_ID": str(uye_id),
        "Ad_Soyad": ad_soyad,
        "Adres": adres,
        "Telefon": telefon,
        "Kayit_Tarihi": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "Odunc_Kitaplar": []
    }
    uyeler.append(yeni_uye)
    dosya_yaz(uyeler)
    print(f"'{ad_soyad}' adlÄ± Ã¼ye baÅŸarÄ±yla eklendi.")

# Ãœye gÃ¼ncelle
def uye_guncelle(uye_id):
    uyeler = dosya_oku()
    for u in uyeler:
        if str(u.get("Uye_ID")) == str(uye_id):
            print(f"GÃ¼ncellenecek Ã¼ye bulundu: {u.get('Ad_Soyad')}")
            yeni_adres = input("Yeni adres (boÅŸ bÄ±rakÄ±rsan deÄŸiÅŸmez): ").strip()
            yeni_telefon = input("Yeni telefon (boÅŸ bÄ±rakÄ±rsan deÄŸiÅŸmez): ").strip()
            if yeni_adres:
                u["Adres"] = yeni_adres
            if yeni_telefon:
                u["Telefon"] = yeni_telefon
            dosya_yaz(uyeler)
            print("Ãœye bilgileri gÃ¼ncellendi.")
            return
    print("Bu ID ile kayÄ±tlÄ± bir Ã¼ye bulunamadÄ±.")

# Ãœye sil
def uye_sil(uye_id):
    uyeler = dosya_oku()
    yeni_liste = [u for u in uyeler if str(u.get("Uye_ID")) != str(uye_id)]
    if len(uyeler) == len(yeni_liste):
        print("Bu ID ile kayÄ±tlÄ± bir Ã¼ye bulunamadÄ±.")
    else:
        dosya_yaz(yeni_liste)
        print(f"ID {uye_id} olan Ã¼ye baÅŸarÄ±yla silindi.")

# Kitap Ã¶dÃ¼nÃ§ verme
def kitap_odunc_ver(uye_id):
    uyeler = dosya_oku()
    for u in uyeler:
        if str(u.get("Uye_ID")) == str(uye_id):
            kitap_adi = input("Kitap adÄ±: ").strip()
            if not kitap_adi:
                print("Kitap adÄ± boÅŸ olamaz.")
                return

            # Teslim tarihi otomatik hesapla (14 gÃ¼n sonrasÄ±)
            teslim_tarihi = datetime.now() + timedelta(days=14)
            teslim_str = teslim_tarihi.strftime("%Y-%m-%d")
            # TÃ¼rkÃ§e gÃ¼n ismi
            teslim_gunu = TURKCE_GUNLER[teslim_tarihi.weekday()]

            odunc = {
                "Kitap_Adi": kitap_adi,
                "Alis_Tarihi": datetime.now().strftime("%Y-%m-%d"),
                "Teslim_Tarihi": teslim_str,
                "Teslim_Gunu": teslim_gunu
            }

            # Ensure field exists
            if "Odunc_Kitaplar" not in u or u["Odunc_Kitaplar"] is None:
                u["Odunc_Kitaplar"] = []

            u["Odunc_Kitaplar"].append(odunc)
            dosya_yaz(uyeler)

            print(f"'{kitap_adi}' adlÄ± kitap {u.get('Ad_Soyad', 'Ãœye')} adlÄ± Ã¼yeye Ã¶dÃ¼nÃ§ verildi.")
            print(f"Teslim tarihi: {teslim_str} ({teslim_gunu})")
            return
    print("Bu ID ile kayÄ±tlÄ± bir Ã¼ye bulunamadÄ±.")

# Kitap teslim alma
def kitap_teslim_al(uye_id):
    uyeler = dosya_oku()
    for u in uyeler:
        if str(u.get("Uye_ID")) == str(uye_id):
            odunclar = u.get("Odunc_Kitaplar", []) or []
            if not odunclar:
                print("Bu Ã¼yenin Ã¶dÃ¼nÃ§ aldÄ±ÄŸÄ± kitap yok.")
                return
            print("Ã–dÃ¼nÃ§ alÄ±nan kitaplar:")
            for i, k in enumerate(odunclar, 1):
                kitap_adi = k.get('Kitap_Adi', 'Bilinmiyor')
                teslim = k.get('Teslim_Tarihi', '-')
                teslim_gunu = k.get('Teslim_Gunu', '-')
                print(f"{i}. {kitap_adi} (Teslim Tarihi: {teslim} - {teslim_gunu})")
            secim = input("Teslim alÄ±nacak kitabÄ±n numarasÄ±: ").strip()
            if secim.isdigit() and 1 <= int(secim) <= len(odunclar):
                kitap = odunclar.pop(int(secim)-1)
                # Teslim tarihi kontrolÃ¼
                try:
                    teslim_gunu_dt = datetime.strptime(kitap.get("Teslim_Tarihi", ""), "%Y-%m-%d")
                    fark = (datetime.now().date() - teslim_gunu_dt.date()).days
                except Exception:
                    fark = 0
                if fark > 0:
                    print(f"Kitap {fark} gÃ¼n geÃ§ teslim edildi. Ceza uygulanabilir.")
                print(f"'{kitap.get('Kitap_Adi', 'Bilinmiyor')}' kitabÄ± teslim alÄ±ndÄ±.")
                # GÃ¼ncellenmiÅŸ listeleri kaydet
                u["Odunc_Kitaplar"] = odunclar
                dosya_yaz(uyeler)
                return
            else:
                print("GeÃ§ersiz seÃ§im.")
                return
    print("Bu ID ile kayÄ±tlÄ± bir Ã¼ye bulunamadÄ±.")

# MenÃ¼
def menu():
    while True:
        print("""
=======  ÃœYE VE KÄ°TAP YÃ–NETÄ°M SÄ°STEMÄ° =======
1 - Ãœyeleri Listele
2 - Ãœye Ekle
3 - Ãœye GÃ¼ncelle
4 - Ãœye Sil
5 - Kitap Ã–dÃ¼nÃ§ Ver
6 - Kitap Teslim Al
7 - Ã‡Ä±kÄ±ÅŸ
==============================================
""")
        secim = input("Ä°ÅŸlem seÃ§iniz (1-7): ").strip()
        if secim == "1":
            uyeleri_listele()
        elif secim == "2":
            uye_id = input("Ãœye ID: ").strip()
            ad_soyad = input("Ad Soyad: ").strip()
            adres = input("Adres: ").strip()
            telefon = input("Telefon: ").strip()
            uye_ekle(uye_id, ad_soyad, adres, telefon)
        elif secim == "3":
            uye_id = input("GÃ¼ncellenecek Ã¼ye ID: ").strip()
            uye_guncelle(uye_id)
        elif secim == "4":
            uye_id = input("Silinecek Ã¼ye ID: ").strip()
            uye_sil(uye_id)
        elif secim == "5":
            uye_id = input("Kitap verilecek Ã¼ye ID: ").strip()
            kitap_odunc_ver(uye_id)
        elif secim == "6":
            uye_id = input("Kitap teslim alÄ±nacak Ã¼ye ID: ").strip()
            kitap_teslim_al(uye_id)
        elif secim == "7":
            print("Programdan Ã§Ä±kÄ±lÄ±yor...")
            break
        else:
            print("GeÃ§ersiz seÃ§im, lÃ¼tfen 1-7 arasÄ±nda bir deÄŸer giriniz.")

# ProgramÄ± Ã§alÄ±ÅŸtÄ±r
if __name__ == "__main__":
    menu()